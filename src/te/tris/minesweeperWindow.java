/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package te.tris;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import static te.tris.Minesweeper.battleGround;

/**
 *
 * @author muszkie
 */
public class minesweeperWindow extends javax.swing.JPanel {

    /**
     * Creates new form saperGra
     */
    
    Minesweeper mine = new Minesweeper();
    Minesweeper.fieldType[][] ground;
    Boolean [][] visited = new Boolean[mine.battleGround.getBattleWidth()+2][mine.battleGround.getBattleHeight()+2];
    Boolean [][] bombsFound = new Boolean[mine.battleGround.getBattleWidth()+2][mine.battleGround.getBattleHeight()+2];
    public Point current = new Point();
    boolean gameOverFlag = false;
    boolean winFlag = false;
    int count=0;
    int clickCount=0;
    public minesweeperWindow() {
        initComponents();
        reset();
        //jLabel1.setText("Game Over");
        //jLabel1.setVisible(true);
        
    }
    public void reset(){        
        mine.battleGround.fillBattleGround();
        ground = mine.battleGround.getBattleGround();
        for(int i=0;i<=(mine.battleGround.getBattleWidth()+1);i++){
            for(int j=0;j<=(mine.battleGround.getBattleHeight()+1);j++){
                visited[i][j]=false;
                bombsFound[i][j]=false;
            }
        }
        current.x = 5;
        current.y = 5;
    }
    
    @Override
    protected void paintComponent(Graphics g) {

            super.paintComponent(g);
            g.setColor(Color.LIGHT_GRAY);
            g.fillRect(0, 0, this.getWidth(), this.getHeight());
            g.setColor(Color.black);
            Font currentFont = g.getFont();
            Font newFont = currentFont.deriveFont(currentFont.getSize() * 2F);
            g.setFont(newFont);
            for(int i=0;i<=(mine.battleGround.getBattleWidth()+1);i++){
            for(int j=0;j<=(mine.battleGround.getBattleHeight()+1);j++){
                //System.out.print(" "+ground[i][j].getValue()+" ");
                if(current.x == i && current.y== j){
                    g.setColor(Color.red);
                }
                if(visited[i][j] || ground[i][j] == Minesweeper.fieldType.border){
                g.drawString(ground[i][j].getValue(),(50+((i-1)*30)), (50+((j-1)*30)));
                }
                else{
                    if(bombsFound[i][j]){
                        g.setColor(Color.yellow);
                    }
                    g.fillRect((45+((i-1)*30)), ((32+(j-1)*30)),25,25);
                }
                g.setColor(Color.black);
            }
            //System.out.print("\n");
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    void setVisited() {
        visited[current.x][current.y] = true;
        clickCount+=1;
        if(ground[current.x][current.y] == Minesweeper.fieldType.bomb){
            gameOverFlag = true;
        }
        if(ground[current.x][current.y] == Minesweeper.fieldType.clear){
            checkNeighbourhoods(current.x,current.y);
        }
        repaint();
    }

    private void checkNeighbourhoods(int x, int y) {
        if(ground[x-1][y-1] == Minesweeper.fieldType.clear && visited[x-1][y-1] == false){
            visited[x-1][y-1] = true;
            checkNeighbourhoods(x-1,y-1);
        }
        if(ground[x-1][y] == Minesweeper.fieldType.clear && visited[x-1][y] == false){
            visited[x-1][y] = true;
            checkNeighbourhoods(x-1,y);
        }
        if(ground[x-1][y+1] == Minesweeper.fieldType.clear && visited[x-1][y+1] == false){
            visited[x-1][y+1] = true;
            checkNeighbourhoods(x-1,y+1);
        }
        if(ground[x][y-1] == Minesweeper.fieldType.clear && visited[x][y-1] == false){
            visited[x][y-1] = true;
            checkNeighbourhoods(x,y-1);
        }
        if(ground[x][y+1] == Minesweeper.fieldType.clear && visited[x][y+1] == false){
            visited[x][y+1] = true;
            checkNeighbourhoods(x,y+1);
        }
        if(ground[x+1][y-1] == Minesweeper.fieldType.clear && visited[x+1][y-1] == false){
            visited[x+1][y-1] = true;
            checkNeighbourhoods(x+1,y-1);
        }                       
        if(ground[x+1][y] == Minesweeper.fieldType.clear && visited[x+1][y] == false){
            visited[x+1][y] = true;
            checkNeighbourhoods(x+1,y);
        }
        if(ground[x+1][y+1] == Minesweeper.fieldType.clear && visited[x+1][y+1] == false){
            visited[x+1][y+1] = true;
            checkNeighbourhoods(x+1,y+1);
        }
        visited[x+1][y+1] = true;
        visited[x+1][y] = true;
        visited[x+1][y-1] = true;
        visited[x][y+1] = true;
        visited[x][y-1] = true;
        visited[x-1][y+1] = true;
        visited[x-1][y] = true;
        visited[x-1][y-1] = true;
    }
    
    void setBombFound(){
        if(ground[current.x][current.y] == Minesweeper.fieldType.bomb ){
            if(!bombsFound[current.x][current.y]){
            count+=1;
            }
            else{
                count-=1;
            }
        }
        bombsFound[current.x][current.y] = !bombsFound[current.x][current.y];

        if(count==10){
            winFlag = true;
        }
    }

    boolean gameWin(){
        return winFlag;
    }
    boolean gameOver() {
        return gameOverFlag;
    }
    
    void showText(){
        //jLabel1.setText("Game Over");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
